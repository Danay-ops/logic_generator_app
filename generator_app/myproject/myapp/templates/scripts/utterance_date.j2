def utterance_date(string):
    """Функция обработки распознавания даты и возврат ее значения """
    regexp_date = re.compile('(\d{1,2})')
    regexp_date_2nd = re.compile('((^|\s)\d{1,2}\s+числ)')
    regexp_date_3th = re.compile(
        '((^|\s)\d{1,2}\s+(сентябр|октябр|ноябр|декабр|январ|феврал|март|апрел|ма(й|я)|июн|июл|авгус))')
    regexp_date_4th = re.compile('(^|\s)(понедельн|вторн|сред|четв|пятниц|суббот|воскрес)')
    regexp_date_6th = re.compile('(^|\s)(через|дн(я|ей))?\s(.*)')
    regexp_date_7th = re.compile('((^|\s)завтр.*($|\s))')
    regexp_date_8th = re.compile('((^|\s)послезавтр.*($|\s))')
    regexp_date_9th = re.compile('(^|\s)(на\s)?(след|грядущ|будущ|предстоящ).*\sнедел.*')
    regexp_date_10th = re.compile('(^|\s)(.*)выход.*')
    regexp_date_today = re.compile('(^|\s)сегодн.*($|\s)')
    eng_rus_weekdays = {'понедельн': 'Monday', 'вторн': 'Tuesday', 'сред': 'Wednesday', 'четв': 'Thursday',
                        "пятниц": 'Friday', 'суббот': 'Saturday', 'воскрес': 'Sunday'}

    date_today = datetime.datetime.today()
    clear_year = date_today.year  # текущий год
    try:
        if re.search(regexp_date_8th, string) is not None:
            # функция для обработки паттерна: послезавтр%
            our_date = date_today + datetime.timedelta(days=2)
            day = int(our_date.day)
            month = int(our_date.month)
            year = int(our_date.year)
            clear_date = datetime.datetime(year, month, day, 0, 0)
            return clear_date

        elif re.search(regexp_date_7th, string) is not None:
            nn.log('regexp_date_7th')
            # функция для обработки паттерна: завтр%
            our_date = date_today + datetime.timedelta(days=1)
            day = int(our_date.day)
            month = int(our_date.month)
            year = int(our_date.year)
            clear_date = datetime.datetime(year, month, day, 0, 0)
            return clear_date

        elif re.search(regexp_date_6th, string) is not None and 'мин' not in string and 'час' not in string:
            nn.log('regexp_date_6th')
            # функция для обработки паттерна: через ... дней
            compile_day_text = {'пар': 2, 'один': 1, 'дв': 2, 'тр': 3, 'недел': 7, 'мес': 30, 'год': 365}
            count_day = 1
            if re.search(regexp_date, string) and 'недел' in string:
                for key in compile_day_text:
                    if key in string:
                        count_day = compile_day_text[key] * int(re.search(regexp_date, string).group())
            elif re.search(regexp_date, string):
                count_day = int(re.search(regexp_date, string).group())
            else:
                for key in compile_day_text:
                    if key in string:
                        count_day = compile_day_text[key]
            callback_day = date_today + datetime.timedelta(days=count_day)
            day = int(callback_day.day)
            month = int(callback_day.month)
            year = int(callback_day.year)
            clear_date = datetime.datetime(year, month, day, 0, 0)
            return clear_date

        elif re.search(regexp_date_9th, string) is not None and re.search(regexp_date, string) is None:
            nn.log('regexp_date_9th')
            # функция для обработки паттерна: на следующей неделе
            our_date = date_today + datetime.timedelta(weeks=1)
            clear_date = None
            if our_date.weekday() == 0:
                return our_date
            while our_date.weekday() != 0:
                our_date -= datetime.timedelta(days=1)
                day = int(our_date.day)
                month = int(our_date.month)
                year = int(our_date.year)
                clear_date = datetime.datetime(year, month, day, 0, 0)
            return clear_date

        elif re.search(regexp_date_today, string) is not None:
            nn.log('regexp_date_today')
            return datetime.datetime.today()

        elif re.search(regexp_date_4th, string) is not None:
            nn.log('regexp_date_4th')
            # функция для обработки паттерна: (понедельник|вторник|...)
            match_date = re.findall(regexp_date_4th, string)
            match_date = match_date[len(match_date) - 1][1]
            our_date = datetime.datetime(date_today.year, date_today.month, date_today.day)
            for key, value in eng_rus_weekdays.items():
                if key in match_date:
                    while our_date.strftime('%A') != eng_rus_weekdays[key]:
                        our_date += datetime.timedelta(days=1)
                    clear_date = our_date
                    return clear_date

        elif re.search(regexp_date_2nd, string) is not None:
            nn.log('regexp_date_2nd')
            # функция для обработки паттерна: ... числа
            match_date = re.search(regexp_date_2nd, string).group(0)
            match_date_digits = re.search(regexp_date, match_date).group(0)
            if int(match_date_digits) < date_today.day:
                clear_month = date_today.month + 1
                if date_today.month == 12:
                    clear_year += 1
                    clear_month = 1
                clear_day = int(match_date_digits)
                clear_date = datetime.datetime(clear_year, clear_month, clear_day, 0, 0)
                return clear_date
            else:
                clear_month = date_today.month
                clear_day = int(match_date_digits)
                clear_date = datetime.datetime(clear_year, clear_month, clear_day, 0, 0)
                return clear_date

        elif re.search(regexp_date_3th, string) is not None:
            nn.log('regexp_date_3th')
            dict_month = {'сентяб': 9, 'нояб': 11, 'декаб': 12, 'октяб': 10, 'январ': 1, 'феврал': 2, 'март': 3, 'апрел': 4,
                        'май': 5, 'мая': 5, 'июн': 6, 'июл': 7, 'авгус': 8}
            match_date = re.search(regexp_date_3th, string).group(0)
            match_date_digits = int(re.search(regexp_date, match_date).group(0))
            clear_month = 1
            for month in dict_month:
                if month in match_date:
                    clear_month = dict_month[month]
            # if clear_month == 12:
            #     clear_year -= 1
            try:
                clear_date = datetime.datetime(clear_year, clear_month, match_date_digits, 0, 0)
            except ValueError:
                return 'error'
            return clear_date

        elif re.search(regexp_date_10th, string) is not None:
            nn.log('regexp_date_10th')
            # функция для обработки паттерна: (на|после) выходных
            match_date = re.search(regexp_date_10th, string).group(2)
            if 'посл' in match_date:
                our_date = date_today.weekday()
                change_item = (6 - our_date) + 1
                result_date = date_today + datetime.timedelta(days=change_item)
                our_date = datetime.datetime(result_date.year, result_date.month, result_date.day)
                return our_date
            else:
                our_date = date_today.weekday()
                change_item = (6 - our_date)
                result_date = date_today + datetime.timedelta(days=change_item)
                our_date = datetime.datetime(result_date.year, result_date.month, result_date.day)
                return our_date

        elif re.search(regexp_date, string) is not None:
            nn.log('regexp_date')
            try:
                match_date = int(re.search(regexp_date, string).group(0))
                month_now = DAY.month
                if 'месяц' in string:   # для отработки месяца 2
                    clear_month = month_now + match_date
                    match_date = DAY.day
                    clear_year = 2024
                    result_date = datetime.datetime(clear_year, clear_month, match_date)
                    return result_date
                if match_date > DAY.day:
                    clear_month = month_now
                else:
                    if month_now == 12:
                        clear_month = 1
                        clear_year = 2023
                    else:
                        clear_month = month_now + 1
                result_date = datetime.datetime(clear_year, clear_month, match_date)
                return result_date
            except ValueError:
                return 'error'
        else:
            nn.log('не удалось распознать дату пользователя')
            return "error"
    except ValueError:
        return 'error'